/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package clix.crud.update;

import clix.components.btn.Button;
import clix.home.Home;
import clix.jnafilechooser.api.JnaFileChooser;
import clix.manager.FormsManager;
import clix.model.ModelReceta;
import clix.util.db;
import com.formdev.flatlaf.FlatClientProperties;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.util.Objects;

/**
 *
 * @author clint
 */
public class MainCrudUpdate extends JPanel {
    // para guardar direccion de la imagen
     private String imagePath = "";
     ModelReceta recetaPas;



    /**
     * Creates new form MainCrud
     */
    public MainCrudUpdate(ModelReceta receta) {
        this.recetaPas = receta;
        initComponents();

       // System.out.println(receta.getImagen());

        textNombreReceta.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Ingrese el nombre de la receta");
        textNombreReceta.putClientProperty(FlatClientProperties.STYLE, "" +
                "showClearButton:true"
        );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */




    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNombreReceta = new JLabel();
        lblCategoria = new JLabel();
        lblDescripcion = new JLabel();
        textNombreReceta = new JTextField();
        comboboxCategoria = new JComboBox<>();
        jScrollPane1 = new JScrollPane();
        textDescripcionReceta = new JTextPane();
        lblDificultad = new JLabel();
        jLabel5 = new JLabel();
        comboboxTiempoPrep = new JComboBox<>();
        comboboxDificultad = new JComboBox<>();
        lnlPasosReceta = new JLabel();
        jScrollPane2 = new JScrollPane();
        textPasosReceta = new JTextPane();
        btnBuscarImagen = new JButton();
        jSeparator1 = new JSeparator();
        lblImagen = new JLabel();
        seguir = new Button();
        guardar = new Button();
        regresar = new Button();
        lblDescripcion1 = new JLabel();
        // mostar los datos que nos pasaron

        lblNombreReceta.setText("Nombre de la Receta");
        // poner negrita
        lblNombreReceta.setFont(new Font("Segoe UI", 1, 13));

        lblCategoria.setText("Categoria");
        lblCategoria.setFont(new Font("Segoe UI", 1, 13));

        lblDescripcion.setText("Descripcion");
        lblDescripcion.setFont(new Font("Segoe UI", 1, 13));

        textNombreReceta.addActionListener(this::textNombreRecetaActionPerformed);
        // pasar el nombre de la receta que nos pasaron pero ya marcado
        textNombreReceta.setText(recetaPas.getNombre());


        comboboxCategoria.setModel(new DefaultComboBoxModel<>(new String[] { "Seleccione una categoria", "Desayuno", "Almuerzo", "Cena", "Postre"}));
        comboboxCategoria.addActionListener(this::comboboxCategoriaActionPerformed);
        // estamoa pasando la categoria que nos pasaron pero ya marcado
        var categoria = recetaPas.getId_categoria();
        String categoriaString = switch (categoria) {
            case 1 -> "Desayuno";
            case 2 -> "Almuerzo";
            case 3 -> "Cena";
            case 4 -> "Postre";
            default -> "Seleccione una categoria";
        };
        comboboxCategoria.setSelectedItem(categoriaString);


        jScrollPane1.setViewportView(textDescripcionReceta);
        // pasar la descripcion que nos pasaron pero ya marcado
        textDescripcionReceta.setText(recetaPas.getDescripcion());


        lblDificultad.setText("Dificultad");

        lblDificultad.setFont(new Font("Segoe UI", 1, 13));

        jLabel5.setText("Tiempo de Preparacion");
        jLabel5.setFont(new Font("Segoe UI", 1, 13));

        comboboxTiempoPrep.setModel(new DefaultComboBoxModel<>(new String[] { "Seleccione un tiempo en minutos", "15", "30", "45", "60", "90", "120","150","180","240","300" }));
        // dejar que puedan realizar cambios
        comboboxTiempoPrep.setEditable(true);
        // estamoa pasando el tiempo de preparacion que nos pasaron pero ya marcado
        String tiempoPrepString = String.valueOf(recetaPas.getTiempo_de_preparacion());
        comboboxTiempoPrep.setSelectedItem(tiempoPrepString);



        comboboxDificultad.setModel(new DefaultComboBoxModel<>(new String[] { "Seleccione una dificultad", "Facil", "Moderado", "Dificil" }));
        // estamoa pasando la dificultad que nos pasaron pero ya marcado
        var dificultad = recetaPas.getDificultad();
        String dificultadString = switch (dificultad) {
            case 1 -> "Facil";
            case 2 -> "Moderado";
            case 3 -> "Dificil";
            default -> "Seleccione una dificultad";
        };
        comboboxDificultad.setSelectedItem(dificultadString);
        lnlPasosReceta.setText("Pasos a Seguir");
        lnlPasosReceta.setFont(new Font("Segoe UI", 1, 13));
        jScrollPane2.setViewportView(textPasosReceta);
        // la condicion es que no pasara un texto largo pero ne medio de esos hay "_" o un "-" entonces se reemplaza por un salto de linea
        String pasosReceta = recetaPas.getInstruccion_de_preparacion();
        if (pasosReceta.contains("_")) {
            pasosReceta = pasosReceta.replace("_", "\n");
        }
        if (pasosReceta.contains("-")) {
            pasosReceta = pasosReceta.replace("-", "\n");
        }
        textPasosReceta.setText(pasosReceta);





        btnBuscarImagen.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/iconsImg/file-and-folder.png")))); // NOI18N
        btnBuscarImagen.setText("buscar");
        btnBuscarImagen.setBackground(new Color(103, 103, 103));
        btnBuscarImagen.setForeground(new Color(245, 245, 245));
        btnBuscarImagen.addActionListener(this::btnBuscarImagenActionPerformed);



        seguir.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/iconsImg/flecha-correcta.png")))); // NOI18N
        // poner el icono a la derecha
        seguir.setHorizontalTextPosition(SwingConstants.LEFT);
        // centrar el texto
        seguir.setHorizontalAlignment(SwingConstants.CENTER);
        seguir.setBackground(new Color(29, 162, 253));
        seguir.setForeground(new Color(245, 245, 245));
        seguir.setRippleColor(new Color(255, 255, 255));
        seguir.setShadowColor(new Color(29, 162, 253));
        seguir.setText("seguir");
        seguir.addActionListener(this::seguirActionPerformed);




        guardar.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/iconsImg/guardar-datos.png")))); // NOI18N
        guardar.setText("Actualizar");

        //centrar el texto
        guardar.setHorizontalAlignment(SwingConstants.CENTER);
        guardar.setBackground(new Color(30, 180, 114));
        guardar.setForeground(new Color(245, 245, 245));
        guardar.setRippleColor(new Color(255, 255, 255));
        guardar.setShadowColor(new Color(30, 180, 114));
        guardar.addActionListener(this::guardarActionPerformed);

        // poner la imagen que nos pasaron
        lblImagen.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                super.componentResized(e);
                if (recetaPas.getImagen() != null) {
                    Image img = ((ImageIcon) recetaPas.getImagen()).getImage();
                    ImageIcon img2 = new ImageIcon(img.getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH));
                    lblImagen.setIcon(img2);
                }
            }
        });




        regresar.setIcon(new ImageIcon(Objects.requireNonNull(getClass().getResource("/iconsImg/flecha-izquierda.png")))); // NOI18N

        regresar.setText("regresar");
        regresar.setHorizontalAlignment(SwingConstants.CENTER);
        regresar.setBackground(new Color(253, 83, 83));
        regresar.setForeground(new Color(245, 245, 245));
        regresar.setRippleColor(new Color(255, 255, 255));
        regresar.setShadowColor(new Color(253, 83, 83));
        regresar.addActionListener(this::regresarActionPerformed);

        lblDescripcion1.setFont(new Font("Segoe UI", 0, 13)); // NOI18N
        lblDescripcion1.setText("\" Despu√©s de cada paso, poner guion: ' - ' \"");

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(lblDificultad)
                            .addComponent(comboboxDificultad, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(comboboxTiempoPrep, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(textNombreReceta, GroupLayout.PREFERRED_SIZE, 201, GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombreReceta))
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(lblCategoria)
                            .addComponent(comboboxCategoria, GroupLayout.PREFERRED_SIZE, 200, GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lblDescripcion, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 455, GroupLayout.PREFERRED_SIZE))
                .addGap(96, 96, 96))
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblImagen, GroupLayout.PREFERRED_SIZE, 252, GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(157, 157, 157)
                        .addComponent(btnBuscarImagen, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(lnlPasosReceta)
                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 668, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescripcion1, GroupLayout.PREFERRED_SIZE, 264, GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90))
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(regresar, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(guardar, GroupLayout.PREFERRED_SIZE, 117, GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(seguir, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
                .addGap(335, 335, 335))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNombreReceta)
                            .addComponent(lblDescripcion)))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblCategoria)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(textNombreReceta, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(comboboxCategoria, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblDificultad)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboboxDificultad, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboboxTiempoPrep, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lnlPasosReceta)
                .addGap(12, 12, 12)
                .addComponent(lblDescripcion1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblImagen, GroupLayout.PREFERRED_SIZE, 258, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarImagen))
                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 320, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(regresar, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                    .addComponent(seguir, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textNombreRecetaActionPerformed(ActionEvent evt) {//GEN-FIRST:event_textNombreRecetaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNombreRecetaActionPerformed

    private void btnBuscarImagenActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnBuscarImagenActionPerformed

        JnaFileChooser jnaCh = new JnaFileChooser();
        jnaCh.addFilter("images","png","jpg","jpeg");
        jnaCh.setMultiSelectionEnabled(false);


        boolean save = jnaCh.showOpenDialog(SwingUtilities.getWindowAncestor(this)); // showOpenDialog retorna true si se selecciono un archivo

        if (save) {
            imagePath = jnaCh.getSelectedFile().getAbsolutePath();

            Image img = new ImageIcon(imagePath).getImage();
            ImageIcon img2 = new ImageIcon(img.getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH));
            lblImagen.setIcon(img2);
        }


    }//GEN-LAST:event_btnBuscarImagenActionPerformed

    private void comboboxCategoriaActionPerformed(ActionEvent evt) {//GEN-FIRST:event_comboboxCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboboxCategoriaActionPerformed

    private byte[] convertImageToBytes (String imagePath) {
        byte[] imageBytes = null;
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            FileInputStream fis = new FileInputStream(new File(imagePath));
            byte[] buffer = new byte[1024];
            int read = 0;
            while ((read = fis.read(buffer)) != -1) {
                baos.write(buffer,0,read);
            }
            imageBytes = baos.toByteArray();
        } catch (Exception e) {
            System.out.println(e);
        }
        return imageBytes;
    }

    private void guardarActionPerformed(ActionEvent evt) {

        String nombreReceta = textNombreReceta.getText();

        String categoriaString = Objects.requireNonNull(comboboxCategoria.getSelectedItem()).toString();
        int categoria = switch (categoriaString) {
            case "Desayuno" -> 1;
            case "Almuerzo" -> 2;
            case "Cena" -> 3;
            case "Postre" -> 4;
            default -> 0;
        };


        String descripcion = textDescripcionReceta.getText();
        String dificultadString = Objects.requireNonNull(comboboxDificultad.getSelectedItem()).toString();
        int dificultad = switch (dificultadString) {
            case "Facil" -> 1;
            case "Moderado" -> 2;
            case "Dificil" -> 3;
            default -> 0;
        };


        String pasosReceta = textPasosReceta.getText();

        byte[] imageBytes = new byte[0];

        if (recetaPas.getImagen() != null) {
            // Si no se seleccion√≥ una nueva imagen pero el objeto recetaPas tiene una imagen, usa esa imagen
            ImageIcon icon = (ImageIcon) recetaPas.getImagen();
            BufferedImage bi = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics g = bi.createGraphics();
            // paint the Icon to the BufferedImage.
            icon.paintIcon(null, g, 0,0);
            g.dispose();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            try {
                ImageIO.write(bi, "jpg", baos);
                imageBytes = baos.toByteArray();
            } catch (IOException e) {
                System.out.println(e);
            }
        } else {
            // Si no se seleccion√≥ una nueva imagen y el objeto recetaPas no tiene una imagen, establece imageBytes en null
            imageBytes = null;
        }

        if (!imagePath.isEmpty()) {
            // Si se seleccion√≥ una nueva imagen, convierte la imagen a bytes
            imageBytes = convertImageToBytes(imagePath);
        }

        String tiempoPrepString = Objects.requireNonNull(comboboxTiempoPrep.getSelectedItem()).toString();
        double tiempoPrep = Double.parseDouble(tiempoPrepString);


        if (nombreReceta.isEmpty() || descripcion.isEmpty() || dificultad == 0 || categoria == 0 || pasosReceta.isEmpty() || tiempoPrep == 0 ) {
            JOptionPane.showMessageDialog(null, "Debe llenar todos los campos");
        } else {
            try {
                // ahora actualizar la receta que se acaba de guardar
                String sql3 = "UPDATE Receta SET nombre = ?, descripcion = ?, tiempo_de_preparacion = ?, instruccion_de_preparacion = ?, dificultad = ?, id_categoria = ?, imagen = ? WHERE id_receta = ?";
                PreparedStatement pstmt2 = db.getConnection().prepareStatement(sql3);
                pstmt2.setString(1, nombreReceta);
                pstmt2.setString(2, descripcion);
                pstmt2.setDouble(3, tiempoPrep);
                pstmt2.setString(4, pasosReceta);
                pstmt2.setInt(5, dificultad);
                pstmt2.setInt(6, categoria);
                pstmt2.setBytes(7, imageBytes);
                pstmt2.setInt(8, recetaPas.getId_receta());
                pstmt2.executeUpdate();
                JOptionPane.showMessageDialog(null, "Receta actualizada correctamente");


            } catch (Exception ex) {
                System.out.println(ex);
            }
        }


    }

    private void regresarActionPerformed(ActionEvent evt) {

        FormsManager.getInstance().showForm(new Home());
    }

    private void seguirActionPerformed(ActionEvent evt) {

        FormsManager.getInstance().showForm(new MainCrudUpdate2(recetaPas));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnBuscarImagen;
    private JComboBox<String> comboboxCategoria;
    private JComboBox<String> comboboxDificultad;
    private JComboBox<String> comboboxTiempoPrep;
    private Button guardar;
    private JLabel jLabel5;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JSeparator jSeparator1;
    private JLabel lblCategoria;
    private JLabel lblDescripcion;
    private JLabel lblDescripcion1;
    private JLabel lblDificultad;
    private JLabel lblImagen;
    private JLabel lblNombreReceta;
    private JLabel lnlPasosReceta;
    private Button regresar;
    private Button seguir;
    private JTextPane textDescripcionReceta;
    private JTextField textNombreReceta;
    private JTextPane textPasosReceta;
    // End of variables declaration//GEN-END:variables
}
